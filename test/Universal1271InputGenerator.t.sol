// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {Test} from "forge-std/Test.sol";
import {ERC4337Account} from "../src/ERC4337Account.sol";
import {ERC4337Factory} from "../src/ERC4337Factory.sol";
import {Universal1271InputGenerator} from "../src/Universal1271InputGenerator.sol";

contract Universal1271InputGeneratorTest is Test {
    bytes universal1271InputGeneratorCode =
        hex"608060405234801561001057600080fd5b506004361061002b5760003560e01c80632786f0b814610030575b600080fd5b61004361003e3660046102e9565b610055565b60405190815260200160405180910390f35b600080836001600160a01b0316803b806020016040519081016040528181526000908060200190933c805190915015610107576001600160a01b03841663ce1506be6100a08561037c565b6040518263ffffffff1660e01b81526004016100be91815260200190565b602060405180830381865afa1580156100db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ff91906103a3565b91505061025c565b60008060608580602001905181019061012091906103e0565b60405192955090935091506000906001600160a01b03851690610144908490610476565b6000604051808303816000865af19150503d8060008114610181576040519150601f19603f3d011682016040523d82523d6000602084013e610186565b606091505b50509050806101eb5760405162461bcd60e51b815260206004820152602760248201527f556e6976657273616c31323731496e70757447656e657261746f723a206465706044820152661b1bde5b595b9d60ca1b606482015260840160405180910390fd5b60405163670a835f60e11b8152600481018490526001600160a01b0389169063ce1506be90602401602060405180830381865afa158015610230573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025491906103a3565b955050505050505b92915050565b6001600160a01b038116811461027757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156102b9576102b961027a565b604052919050565b600067ffffffffffffffff8211156102db576102db61027a565b50601f01601f191660200190565b600080604083850312156102fc57600080fd5b823561030781610262565b9150602083013567ffffffffffffffff81111561032357600080fd5b8301601f8101851361033457600080fd5b8035610347610342826102c1565b610290565b81815286602083850101111561035c57600080fd5b816020840160208301376000602083830101528093505050509250929050565b8051602080830151919081101561039d576000198160200360031b1b821691505b50919050565b6000602082840312156103b557600080fd5b5051919050565b60005b838110156103d75781810151838201526020016103bf565b50506000910152565b6000806000606084860312156103f557600080fd5b835161040081610262565b60208501516040860151919450925067ffffffffffffffff81111561042457600080fd5b8401601f8101861361043557600080fd5b8051610443610342826102c1565b81815287602083850101111561045857600080fd5b6104698260208301602086016103bc565b8093505050509250925092565b600082516104888184602087016103bc565b919091019291505056fea26469706673582212201dd5b3788027aed3043ea4e1efa62838a79e25d1b0aa5641668813c1a8e1ec9e64736f6c63430008150033";
    ERC4337Factory factory;
    ERC4337Account implementation;
    ERC4337Account deployedAccount;
    bytes[] owners;

    function setUp() public {
        implementation = new ERC4337Account();
        factory = new ERC4337Factory(address(implementation));
    }

    function testGetReplaySafeHashForDeployedAccount() public {
        owners.push(abi.encode(address(1)));
        deployedAccount = ERC4337Account(
            payable(factory.createAccount(owners, 0))
        );

        bytes32 hash = 0x15fa6f8c855db1dccbb8a42eef3a7b83f11d29758e84aed37312527165d5eec5;
        bytes32 replaySafeHash = deployedAccount.replaySafeHash(hash);

        vm.etch(
            0xF62849F9A0B5Bf2913b396098F7c7019b51A820a,
            universal1271InputGeneratorCode
        );
        Universal1271InputGenerator universal1271InputGenerator = Universal1271InputGenerator(
                0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
            );
        bytes32 universal1271Input = universal1271InputGenerator
            .universal1271Input(deployedAccount, abi.encode(hash));
        assert(universal1271Input == replaySafeHash);
    }

    function testGetReplaySafeHashForUndeployedAccount() public {
        owners.push(abi.encode(address(1)));
        ERC4337Account undeployedAccount = ERC4337Account(
            payable(factory.getAddress(owners, 0))
        );
        bytes32 hash = 0x15fa6f8c855db1dccbb8a42eef3a7b83f11d29758e84aed37312527165d5eec5;
        bytes memory encodedData = abi.encode(
            address(factory),
            hash,
            abi.encodeWithSignature("createAccount(bytes[],uint256)", owners, 0)
        );

        vm.etch(
            0xF62849F9A0B5Bf2913b396098F7c7019b51A820a,
            universal1271InputGeneratorCode
        );
        Universal1271InputGenerator universal1271InputGenerator = Universal1271InputGenerator(
                0xF62849F9A0B5Bf2913b396098F7c7019b51A820a
            );
        bytes32 universal1271Input = universal1271InputGenerator
            .universal1271Input(undeployedAccount, encodedData);

        // This is now deployed.
        bytes32 replaySafeHash = undeployedAccount.replaySafeHash(hash);

        assert(universal1271Input == replaySafeHash);
    }
}
